{"version":3,"sources":["helpers/findData.tsx","store/loading.ts","store/message.ts","store/posts.ts","store/filterOption.ts","helpers/api.ts","store/index.ts","components/Start.tsx","components/SearchField.tsx","App.tsx","index.tsx"],"names":["findAuthor","userId","users","person","find","user","id","address","Object","entries","slice","map","option","join","name","email","findComments","comments","filter","comment","postId","reducer","loading","action","type","setMessage","message","setPostsList","posts","payload","fetchData","url","a","fetch","response","json","data","rootReducer","combineReducers","loadingReducer","messageReducer","postsReducer","filterOptionReducer","getPosts","state","isLoading","getFilterOption","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","useSelector","className","onClick","preparedPosts","post","author","disabled","SearchField","inputValue","placeholder","value","onChange","event","currentTarget","App","length","PostsList","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd11a732.chunk.js","sourcesContent":["import { User, Comment } from '../interfaces/interfaces';\n\nexport const findAuthor = (userId: number, users: User[]) => {\n  const person: User | undefined = users.find(user => user.id === userId);\n\n  if (person) {\n    const address = Object.entries(person.address)\n      .slice(0, 4)\n      .map(option => option.join(' : '))\n      .join(', ');\n\n    return [person.name, person.email, address];\n  }\n\n  return [];\n};\n\nexport function findComments(id: number, comments: Comment[]) {\n  return comments.filter(comment => comment.postId === id);\n}\n","import { AnyAction } from 'redux';\n// import { useSelector } from 'react-redux';\n// import { getPosts } from './index';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n// const x = useSelector(getPosts);\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      // console.log(x)\n\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst reducer = (message = 'mklkml', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Post } from '../interfaces/interfaces';\n\nconst SET_POSTS_LIST = 'SET_POSTS_LIST';\n\nexport const setPostsList = (posts: Post[]) => ({ type: SET_POSTS_LIST, posts });\n\nconst reducer = (posts: Post[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS_LIST:\n\n      return [...action.posts];\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_FILTER_OPTION = 'SET_FILTER_OPTION';\n\nexport const setFilterOption = (option: string) => ({ type: SET_FILTER_OPTION, payload: option });\n\nconst reducer = (option = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_FILTER_OPTION:\n\n      return action.payload;\n\n    default:\n      return option;\n  }\n};\n\nexport default reducer;\n","export const URLPosts = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nexport const URLUsers = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nexport const URLComments = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nexport const fetchData = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n","/* eslint-disable no-console */\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport { findAuthor, findComments } from '../helpers/findData';\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport postsReducer, { setPostsList } from './posts';\nimport filterOptionReducer from './filterOption';\n\nimport {\n  fetchData, URLComments, URLUsers, URLPosts,\n} from '../helpers/api';\nimport {\n  Comment, PostFromServer, User, Post,\n} from '../interfaces/interfaces';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  posts: postsReducer,\n  option: filterOptionReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getPosts = (state: RootState) => state.posts;\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getFilterOption = (state: RootState) => state.option;\n\nexport const loadMessage = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const users = await fetchData<User>(URLUsers);\n      const posts = await fetchData<PostFromServer >(URLPosts);\n      const comments = await fetchData<Comment>(URLComments);\n\n      const preparedPosts: Post[] = posts.map((post) => {\n        const [author, email, address] = findAuthor(post.userId, users);\n\n        return {\n          ...post,\n          author,\n          email,\n          address,\n          comments: findComments(post.id, comments),\n        };\n      });\n\n      dispatch(setPostsList(preparedPosts));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading, loadMessage } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      className=\"btn btn-info ml\"\n      type=\"button\"\n      onClick={() => dispatch(loadMessage())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterOption } from '../store';\nimport { setFilterOption } from '../store/filterOption';\n\nexport const SearchField = () => {\n  const inputValue = useSelector(getFilterOption);\n  const dispatch = useDispatch();\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    dispatch(setFilterOption(value));\n  };\n\n  return (\n    <div className=\"input-field col s12\">\n      <input\n        className=\"input validate\"\n        id=\"text\"\n        placeholder=\"Search\"\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\nimport { PostsList } from './components/PostsList';\nimport { SearchField } from './components/SearchField';\n\nimport { isLoading, getPosts } from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const posts = useSelector(getPosts);\n\n  return (\n    <div className=\"App\">\n\n      {\n        !posts.length\n          ? <Start />\n          : (\n            <>\n              <SearchField />\n              <PostsList />\n            </>\n          )\n      }\n      <h2>{loading && 'Loading...'}</h2>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}